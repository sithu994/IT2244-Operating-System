(Q1)
Write a "c program" to Enter three numbers from user & then
using parent-child process find factorial,fibonacci and prime numbers of entered numbers


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

long long factorial(int n) {
    long long fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

void fibonacci_series(int n) {
    int a = 0, b = 1, c;
    printf("Fibonacci series up to %d: %d %d", n, a, b);
    for (int i = 2; i < n; i++) {
        c = a + b;
        if (c > n) break;
        printf(" %d", c);
        a = b;
        b = c;
    }
    printf("\n");
}

void prime_numbers(int n) {
    printf("Prime numbers up to %d:", n);
    for (int i = 2; i <= n; i++) {
        int isPrime = 1;
        for (int j = 2; j * j <= i; j++) {
            if (i % j == 0) {
                isPrime = 0;
                break;
            }
        }
        if (isPrime) {
            printf(" %d", i);
        }
    }
    printf("\n");
}

int main() {
    int n1, n2, n3;
    printf("Enter Numbers: ");
    scanf("%d %d %d", &n1, &n2, &n3);

    printf("Main Parent Process ID: %d\n", getpid());

    pid_t f1 = fork();

    if (f1 == 0) {
        // Factorial Process
        printf("Factorial Process ID: %d, Parent ID: %d\n", getpid(), getppid());
        printf("Factorial of %d = %lld\n", n1, factorial(n1));
    } else {
        wait(NULL); // wait for factorial process to finish

        pid_t f2 = fork();
        if (f2 == 0) {
            // Sub-parent process
            printf("Sub-Parent Process ID: %d, Parent ID: %d\n", getpid(), getppid());

            pid_t f3 = fork();
            if (f3 == 0) {
                // Fibonacci process
                printf("Fibonacci Process ID: %d, Parent ID: %d\n", getpid(), getppid());
                fibonacci_series(n2);
            } else {
                wait(NULL);
                pid_t f4 = fork();
                if (f4 == 0) {
                    // Prime number process
                    printf("Prime Numbers Process ID: %d, Parent ID: %d\n", getpid(), getppid());
                    prime_numbers(n3);
                } else {
                    wait(NULL); // wait for prime number process
                }
            }
        } else {
            wait(NULL); // wait for sub-parent process
        }
    }

    return 0;
}
